<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://bfgeek.com/">
  <title>Ian Kilpatrick's (bfgeek) Blog</title>
  <subtitle></subtitle>
  <link href="rss.xml" rel="self" />
  <link href="https://bfgeek.com/" />
  <updated>
    2025-09-13T03:38:20Z
  </updated>
  <id>https://bfgeek.com/</id>
  <author>
    <name>Ian Kilpatrick</name>
  </author>
  <entry>
    <title>Exploiting flex-grow for an Image Gallery</title>
    <link href="/flexbox-image-gallery/" />
    <updated>2025-09-13T03:38:20Z</updated>
    <id>/flexbox-image-gallery/</id>
    <content xml:lang="" type="html">
      <img src="hero.jpg" width="1706" height="1350">
<p>There are lots of different ways to construct image galleries on the web. When
building these it's desirable to:</p>
<ul>
<li>Maintain the aspect-ratio of the images.</li>
<li>Reduce/remove any &quot;whitespace&quot;/&quot;free-space&quot; present (ideally you want all
the images to fill the entire space available) aka <em>full-bleed</em>.</li>
</ul>
<p>These two constraints are often at odds with each other.
<a href="https://medium.com/google-design/google-photos-45b714dfbed1">Google photos has previously described in detail</a>
how they have previously tried to solve this. A simple solution which
web-developers often use is a wrapping flexbox, however this often leaves
whitespace at the end of each flex-line (leaving a ragged edge).</p>
<p>There is a solution to this by using the <code>flex-grow</code> property (potentially one of
the few reasons to use flex-grow with a non-zero or one value).</p>
<pre><code class="language-css">.gallery {
  display: flex;
  flex-wrap: wrap;
  flex-wrap: balance; /* "balance" will be better once available. */
  gap: 24px;
}

/*
  This assumes the content is of the form &lt;img width=100 height=100>
  However, it can be adjusted on any content via. the aspect-ratio property.
*/
img {
  --ar: attr(width type(&lt;number>)) / attr(height type(&lt;number>));
  width: calc(20% * var(--ar));
  height: auto;
  flex-grow: calc(var(--ar));
}</code></pre>
<p>That's it!</p>
<h3>What is this magic?!?</h3>
<p>How this works is a little quirky:</p>
<ol>
<li>
<p>The images in their initial form (with <code>width: 20%</code>) will look something like this:</p>
<img src="initial.jpg" width="1638" height="1479">
<p>First we calculate the aspect-ratio from the <code>width</code> and <code>height</code> attributes on
the image, via. the new <code>attr()</code> function available in CSS:</p>
<pre><code class="language-css">img {
  --ar: attr(width type(&lt;number>)) / attr(height type(&lt;number>));
}</code></pre>
<blockquote>
<p><code>attr()</code> is currently <a href="https://developer.chrome.com/blog/advanced-attr">only available</a>
in Chromium based browsers, but could be set manually via script.</p>
</blockquote>
</li>
<li>
<p>We use this aspect-ratio to override the <code>width</code> of the images. By setting the
<code>width</code> proportional to the apsect-ratio (<code>calc(20% * var(--ar))</code>), we
ensure that every image will have the <strong>same height</strong> before wrapping and
growing. For example:</p>
<img src="partial.jpg" width="1638" height="1083">
<p>At this stage we are left with images which all have the same height, but
have a ragged edge once broken into lines.</p>
</li>
<li>
<p>We then use <code>flex-grow</code> so that each image will <strong>grow proportionally</strong> to
its aspect-ratio. This ensures that each image will keep the same height as
others on the line, but will fill the remaining space.</p>
<img src="hero.jpg" width="1706" height="1350">
<p>Each line will end up with a slightly different size, but all the images
keep their aspect-ratio!</p>
</li>
</ol>
<h3>Downsides?</h3>
<p>Like anything there are some potential downsides.</p>
<ul>
<li>
<p>We are ignoring the pixel sizes of the images, it's possible under this
scheme to scale up an image past its natural pixel size (causing pixelation).</p>
</li>
<li>
<p>Due to the way flex line-breaking works, it's possible for a single image to
be placed on a single line. This often looks bad, but will be mostly fixed
once <a href="https://github.com/w3c/csswg-drafts/issues/3070">flexbox receives</a>
<code>flex-wrap: balance</code>.</p>
<blockquote>
<p>Chromium/Blink has an implementation of <code>flex-wrap: balance</code> behind
<code>chrome://flags/#enable-experimental-web-platform-features</code>.</p>
</blockquote>
</li>
</ul>
<p>Both of these issues can be mitigated by adding something like:</p>
<pre><code class="language-css">img {
  max-width: min(100%, calc(50% * var(--ar)));
}</code></pre>
<p>This will prevent images with too much space on a line from growing too much.
But will potentially leave some space on the line.</p>
<h3>Questions?</h3>
<p>If you have any suggestions/comments/questions or a cool name for this
technique feel free reach to me on <a href="https://bsky.app/profile/bfgeek.bsky.social">Bluesky</a>.</p>
<p>A JSFiddle of this approach can be <a href="https://jsfiddle.net/3d2hewqt/">found here</a>.</p>
<p>Images used in the demo(s) are from <a href="https://picsum.photos">Lorem Picsum</a>.</p>
<p>A live demo is below:</p>
<iframe src="demo.html" style="width: 100%; aspect-ratio: 4/3"></iframe>

    </content>
  </entry>
</feed>

